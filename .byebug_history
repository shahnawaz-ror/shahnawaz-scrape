c
"Your csv is sent to the below users #{event.users}"
c
event
c
self
c
@new_array
c
JSON.parse(upload_csv.users)
upload_csv.users
upload_csv
c
 upload_csv.update(:generated_csv => csv.path)
upload_csv = UploadCsv.last
csv
ew_array
c
new_array
c
new_array
c
new_array
c
new_array
c
@new_array
c
v
@new_array.push([row_map[:refferal_link],row_map[:home_link],link_array_group[row_map[:home_link]]])
@new_array.push()
@new_array
c
[row_map[:home_link],row_map[:home_link],link_array_group[row_map[:home_link]]]
[link_array_group[row_map[:home_link]],row_map[:home_link],link_array_group[row_map[:home_link]]]
[link_array_group[row_map[:home_link]],link_array_group[row_map[:home_link]],link_array_group[row_map[:home_link]]]
link_array_group[row_map[:home_link]]
link_array_group
link_array_group[row_map[:refferal_link]]
link_array_group[row_map[:refferal_link]
row_map[:home_link]
row_map[:refferal_link]
row_map[:home_page]
[link_array_group[row_map[:refferal_link],row_map[:home_page]]]
c
link_array_group[row.to_h[:home_page]]
c
 link_array = page_parse.css('a').map { |link| link['href'] }
link_array_group[row.to_h[:home_page]]
c
row.to_h
c
row.to_h
row.to_h[:home_page]
row
c
row["home_page"] 
cputs row["home_page"]
c
row[0]
c
row[0]
row[1]
c
row[1]
row[0]
row
c
row
c
row
c
            CSV.foreach(upload_csv.csv_file.path).each do |row| puts row[0] end
 CSV.foreach(upload_csv.csv_file.path).map {|row| puts row[0] }
c
csv["refferal URL"]
row["refferal URL"]
csv.each do |row| puts row["refferal URL"] end
csv.each do |row| puts row end
csv = CSV.read(upload_csv.csv_file.path, :headers=>true)
csv = CSV.read('test.csv', :headers=>true)
generated_csv_updates(upload_csv
c
row.split(' ')
row
row.to_h
row.to_hash
row.split
row
c
row
c
row
c
row
c
upload_csv.update(:generated_csv => csv)
csv
file
c
upload_csv.save!
upload_csv.generated_csv = csv
csv
file
upload_csv = UploadCsv.last
c
file
c
file
      upload_csv.generated_csv = file
      upload_csv = UploadCsv.last
photo = ActionDispatch::Http::UploadedFile.new(file)
photo = ActionDispatch::Http::UploadedFile.new(csv)
photo = ActionDispatch::Http::UploadedFile.new(csv4)
photo = ActionDispatch::Http::UploadedFile.new(photo_params)
c
link_array
                link_array.group_by(&:itself).map { |k,v| [k, v.length] }.to_h
                link_array = page_parse.css('a').map { |link| link['href'] }
l_p = page_parse.css('a').map { |link| link['href'] }
                link_array.group_by(&:itself).map { |k,v| [k, v.length] }.to_h
                link_array = page_parse.css('a').map { |link| link }
l_p.group_by(&:itself).map { |k,v| [k, v.length] }.to_h
l_p..group_by(&:itself).map { |k,v| [k, v.length] }.to_h
l_p.tally
l_p.count
l_p = page_parse.css('a').map { |link| link['href'] }
l = page_parse.css('a').map { |link| link['href'] }
c
page_link
c
l = page_parse.css('a').map { |link| link }
l = page_parse.css('a').map { |link| link['href'] }
l = page_parse.css('link').map { |link| link['href'] }
l = page_parse.css('div.heat a').map { |link| link['href'] }
l = page.css('div.heat a').map { |link| link['href'] }
l = doc.css('div.heat a').map { |link| link['href'] }
page_parse
c
@upload_csv.save
c
params[:upload_csv][:users]
params[:users]
params
csv = CSV.parse(csv_text, :headers => true)
csv_text = file.read
file.rewind
file.write(upload_csv_params[:csv_file])
file.write(upload_csv_params)
file.write(params[:search_file])
    file = Tempfile.new(['hello', '.csv'])
params
@upload_csv
